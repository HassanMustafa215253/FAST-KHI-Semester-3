23K2001 - Muzammil

---------------------Q1--------------------------

TITLE My Nineth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
	input BYTE "Enter a number: ", 0
	res BYTE "Product of inputted number with 25: ", 0
.code
	main PROC
	mov eax, 0
	mov edx, offset input
	call writestring
	call readint
	mov ecx, eax
	shl eax, 4
	mov edx, ecx
	shl edx, 3
	add eax,edx
	add eax, ecx
	call crlf
	mov edx, offset res
	call writestring
	call writedec
	call crlf
	exit
main ENDP
END main

---------------------Q2--------------------------

TITLE My Nineth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
	res BYTE "After expanding EBX: ", 0
.code
	main PROC
	mov eax, 0
	mov ebx, 0
	mov bx, -128
	mov ax, bx 
	cwd

	shl edx, 16
	mov ebx, eax
	call dumpregs
	mov edx, offset res
	call writestring
	call writedec
	call crlf
	exit
main ENDP
END main

---------------------Q3--------------------------

TITLE My Nineth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
	res BYTE "bMinutes = ", 0
	bMinutes BYTE ?
.code
	main PROC
	mov eax, 0
	mov ebx, 0
	mov ax, 0ABCDh
	shr ax, 5

	and ax, 3Fh
	mov bMinutes, al
	mov edx, offset res
	call writestring
	movzx eax, bMinutes
	call writedec
	call crlf
	exit
main ENDP
END main

---------------------Q4--------------------------

TITLE My Nineth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
	with byte "with SHRD: ", 0
	without byte "without SHRD: ", 0
.code
	main PROC
	mov eax, 0
	mov ebx, 0
	mov edx, offset without
	call writestring
	call crlf
	mov ax, 10h
	mov bx, 20h

	shr ax, 1
	and bx, 7FFFh
	rcr bx, 1  
	call dumpregs

	mov edx, offset with
	call writestring
	call crlf
	mov ax, 10h
	mov bx, 20h
	SHRD bx, ax ,1
	call dumpregs
	exit
main ENDP
END main

---------------------Q5--------------------------

TITLE My Nineth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
	val1 DWORD ?
	val2 DWORD ?
	val3 DWORD ?
	input byte "Enter a number: ", 0
	res byte "Ans = ", 0
.code
	main PROC
	mov eax, 0
	mov ebx, 0

	mov edx, offset input
	call writestring
	call readint
	mov val1 , eax
	mov edx, offset input
	call writestring
	call readint
	mov val2 , eax
	mov edx, offset input
	call writestring
	call readint
	mov val3 , eax

	mov eax, val2
	mov edx, 0
	IDIV val3
	PUSH eax

	mov eax, val1
	mov edx, 0
	IDIV val2

	POP ebx
	mul ebx
	mov val1 , eax
	call crlf
	mov edx, offset res
	call writestring
	call writedec
	exit
main ENDP
END main

---------------------Q6--------------------------

TITLE My Nineth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
	num1 QWORD 1234567890123456h
    num2 QWORD 6543219876543210h
    ans QWORD 0
    res byte "Ans = ", 0
.code
	main PROC
	mov eax, DWORD PTR num1
    mov ebx, DWORD PTR num1 + 4
    mov ecx, DWORD PTR num2
    mov edx, DWORD PTR num2 + 4

    call Extended_Add
    mov DWORD PTR ans, eax
    mov DWORD PTR ans + 4, ebx

    mov edx, offset res
    call writestring
    mov eax, DWORD PTR ans + 4
    call writehex
    mov eax, DWORD PTR ans
    call writehex
    call crlf
    exit
main ENDP

Extended_Add PROC
    add eax, ecx
    mov ebx, eax                      
    adc ebx, edx 

    ret
Extended_Add ENDP
END main

---------------------Q7--------------------------

TITLE My Ninth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
    no BYTE "Non-prime number. ", 0
    yes BYTE "Prime number! ", 0
    input BYTE "Enter a number to check Prime: ", 0
    i DWORD 2
.code
main PROC
L1:
    mov edx, offset input
    call writestring
    call readint
    cmp eax, 1
    je exit_main

    cmp eax, 2
    je prime_num

    call isPrime
    call crlf
    jmp L1

not_prime:
    mov edx, offset no
    call writestring
    call crlf
    jmp L1

prime_num:
    mov edx, offset yes
    call writestring
    call crlf
    call crlf
    jmp L1

exit_main:
    exit
main ENDP

isPrime PROC
    push eax
    mov ecx, 2

L2:
    mov eax, [esp]
    cdq
    div ecx
    cmp edx, 0
    je not_prime_back

    inc ecx
    mov eax, [esp]
    cmp ecx, eax
    jl L2

    jmp prime_num_back

not_prime_back:
    mov edx, offset no
    call writestring
    call crlf
    jmp cleanup

prime_num_back:
    mov edx, offset yes
    call writestring
    call crlf

cleanup:
    pop eax
    ret
isPrime ENDP
END main

---------------------Q8--------------------------

TITLE My Ninth Lab Tasks (Lab09.asm)
INCLUDE Irvine32.inc
.data
    key BYTE 2, 4, 1, 0, 3, 5, 2, 4, 4, 6
    original BYTE "Muhammad Muzammil Siddiqui", 0
    encryptedMessage BYTE 50 DUP(0)
    before BYTE "Original text: ", 0
    after BYTE "After encryption: ", 0
.code
main PROC
    mov edx, offset before
    call writeString
    mov edx, offset original 
    call writeString
    mov esi, OFFSET original
    mov edi, OFFSET encryptedMessage

    mov ecx, 50
    mov ebx, 0
encryptionLoop:
    mov al, byte ptr [esi]
    cmp al, 0
    je done

    mov dl, byte ptr [key + ebx]
    call rotateByte
    mov [edi], al
    inc esi
    inc edi
    inc ebx
    cmp ebx, 10
    jl encryptionLoop

    mov ebx, 0
    loop encryptionLoop
done:
    call crlf
    call crlf
    mov edx, offset after
    call writeString
    mov edx, OFFSET encryptedMessage
    call WriteString
    call crlf
    exit
main ENDP

rotateByte PROC
    mov cl, dl
    cmp dl, 0
    jge rotateRight
    neg dl

    mov cl, dl
    shl al, cl
    rol al, cl
    ret

rotateRight:
    mov cl, dl
    mov dl, cl
    shr al, cl
    mov cl, dl
    rol al, cl
    ret
rotateByte ENDP
END main
