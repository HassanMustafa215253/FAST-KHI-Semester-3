23K2001 - Muzammil

---------------------Q1--------------------------
C++ implementation:

#include <iostream>
using namespace std;

extern "C" void ThreeProd();

int main() {
    ThreeProd();
    int x, y, z, product;
    cout << "Input three numbers: ";
    cin >> x >> y >> z;

    _asm {
        MOV EAX, x
        MOV EBX, y
        MOV ECX, z
        IMUL EBX
        IMUL ECX
        MOV product, EAX
    }

    cout << "The product of the numbers is: " << product << endl;
    return 0;
}

Assembly implementation:

TITLE My Twelveth Lab Tasks (Lab12.asm)
.686
.MODEL FLAT, C
.STACK 2048
.DATA

num1 dword ?
num2 dword ?
num3 dword ?
result dword ?
.CODE
ThreeProd PROC
    mov eax, num1
    imul num2
    imul num3
    mov result, eax
    ret
ThreeProd ENDP
END

---------------------Q2--------------------------
C++ implementation:

#include <iostream>
using namespace std;

extern "C" void GCD();

int main() {
    GCD();
    int a, b, gcd;
    cout << "Input two integers: ";
    cin >> a >> b;

    _asm {
        MOV EAX, a
        MOV EBX, b
    LoopStart:
        CMP EBX, 0
        JE Exit
        XOR EDX, EDX
        DIV EBX
        MOV EAX, EBX
        MOV EBX, EDX
        JMP LoopStart
    Exit:
        MOV gcd, EAX
    }

    cout << "The GCD of the numbers is: " << gcd << endl;
    return 0;
}


Assembly implementation:

TITLE My Twelveth Lab Tasks (Lab12.asm)
.686
.MODEL FLAT, C
.STACK 2048
.DATA

numA dword ?
numB dword ?

.CODE
GCD PROC
    mov eax, numA
    mov ebx, numB

StartLoop:
    cmp ebx, 0
    je Done
    xor edx, edx
    div ebx
    mov eax, ebx
    mov ebx, edx
    jmp StartLoop
Done:
    mov numA, eax
    ret
GCD ENDP
END
