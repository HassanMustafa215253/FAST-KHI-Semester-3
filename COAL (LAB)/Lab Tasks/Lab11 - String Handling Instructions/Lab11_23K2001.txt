23K2001 - Muzammil

---------------------Q1--------------------------

TITLE My Eleventh Lab Tasks (Lab11.asm)
INCLUDE Irvine32.inc
.data
Str1 BYTE "127&j~3#^&*#*45^",0
key BYTE "#", 0
res BYTE "'#' found at index: ", 0
index SDWORD 0

.code
main PROC
	mov al, key
	mov edi, offset Str1
	mov ecx, lengthof Str1
	call scan_string
exit
main ENDP

scan_string PROC
    cld
    repne scasb
    jnz notfound
    sub edi, offset Str1
    dec edi
    mov index, edi
    jmp done
notfound:
    mov index, -1
done:
    mov edx, offset res
    call writestring
    mov eax, index
    call writeint
    call crlf
    ret
scan_string ENDP

END main

---------------------Q2--------------------------

TITLE My Eleventh Lab Tasks (Lab11.asm)
INCLUDE Irvine32.inc
.data
Str1 BYTE "127&j~3#^&*#*45^", 0
key BYTE "#", 0
res BYTE "'#' found at index: ", 0
index SDWORD 0

.code
main PROC
    mov eax, 0
    mov al, key
    mov esi, offset Str1
    push esi
    push eax
    call scan_string
exit
main ENDP

scan_string PROC
    mov edi, [esp+8]
    mov al, [esp+4]
    mov ecx, lengthof Str1
    
    cld
    repne scasb
    jnz notfound

    sub edi, [esp+8]
    dec edi
    mov index, edi
    jmp done
notfound:
    mov index, -1
done:
    mov edx, offset res
    call writestring
    mov eax, index
    call writeint
    call crlf
    ret 8
scan_string ENDP

END main

---------------------Q3--------------------------

TITLE My Eleventh Lab Tasks (Lab11.asm)
INCLUDE Irvine32.inc
.data

s1 BYTE 10 dup (?)
s2 BYTE 10 dup (?)
equal byte "Strings are equal!",0
inequal byte "Not Equal.",0
input byte "Input string (10 length max): ",0

.code
main proc
	push offset s1
	push offset s2
	
	mov edx, offset input
	call writestring
	mov edx, offset s1
	mov ecx, 10
	call readstring

	push eax
	call crlf

	mov edx, offset input
	call writestring
	mov edx,offset s2
	mov ecx, 10
	call readstring
	call crlf

	call isCompare
	call crlf

exit
main endp

isCompare proc
	push ebp
	mov ebp,esp

	mov ecx, [ebp + 8]
	mov edi, [ebp + 12]
	mov esi, [ebp + 16]

	cld
	repz cmpsb
	jz areEqual

	mov edx, offset inequal
	call writestring

	done:
	pop ebp
	ret 12

	areEqual:
		mov edx, offset equal
		call writestring
		jmp done
isCompare endp

end main

---------------------Q4--------------------------

TITLE My Eleventh Lab Tasks (Lab11.asm)
INCLUDE Irvine32.inc
.data
s1 BYTE 10 dup (?)
s2 BYTE 10 dup (?)
equal byte "Strings are equal!",0
inequal byte "Not Equal.",0
input byte "Input string (10 length max): ",0

.code
main proc
	push offset s1
	push offset s2
	
	mov edx, offset input
	call writestring
	mov edx, offset s1
	mov ecx, 10
	call readstring
	call crlf
	push eax

	call str_reverse
	mov edx,offset s2
	call writestring
	call crlf
exit
main endp

str_reverse proc
	push ebp
	mov ebp, esp

	mov ecx, [ebp + 8]
	mov edi, [ebp + 12]
	mov esi, [ebp + 16]
	add esi, ecx
	dec esi

	L1:
		std
		lodsb
		cld
		stosb
	loop l1

	mov byte ptr [edi], 0
	pop ebp
	ret 12
str_reverse endp

end main

---------------------Q5--------------------------

TITLE My Eleventh Lab Tasks (Lab11.asm)
INCLUDE Irvine32.inc
.data
    arr DWORD 1, 2, 3, 4, 5
    input byte "Input a number to multiply with: ",0
.code
main PROC
    push offset arr
    push lengthof arr
    
    mov edx, offset input
    call writestring

    call readint
    push eax
    call crlf
    call load

    mov ecx, 0
    mov edi,offset arr
    loop2:
        mov eax,[edi+ecx]
        call writedec
        mov eax,' '
        call writechar
        add ecx,4
    cmp ecx,sizeof arr
    jnz loop2
exit
main endp

load proc
    push ebp
    mov ebp,esp

    mov edi,[ebp+16]
    mov esi,edi
    mov ecx,[ebp+12]
    mov ebx,[ebp+8]
    cld
    loop1:
        lodsd
        imul ebx
        stosd
        dec ecx
    cmp ecx,0
    jnz loop1

    pop ebp
    ret 8
load endp

END main

---------------------Q6--------------------------

TITLE My Eleventh Lab Tasks (Lab11.asm)
INCLUDE Irvine32.inc
.data
    getFrequency proto a1:ptr byte, a2:ptr DWORD
    target BYTE "AAEBDCFBBC",0
    freqTable DWORD 256 DUP(0)
    arrow byte " => ",0
.code
main PROC
    mov eax, offset freqtable
    invoke getFrequency, ADDR target, addr freqTable

    mov ecx,0
    mov esi, offset freqtable
    loop2:
        mov eax, DWORD ptr [esi+ecx*4]
        cmp eax,0
        jz skip

        push eax
        mov eax,ecx
        call writechar
        pop eax

        mov edx,offset arrow
        call writestring

        call writedec
        call crlf
        skip:
            inc ecx
    cmp ecx, 256
    jnz loop2
exit
main endp

getFrequency proc a1:ptr byte, a2:ptr DWORD
    push ebp
    mov ebp,esp

    mov edi, [ebp+16]
    mov esi, [ebp+12]

    l1:
        mov eax,0
        lodsb

        cmp al,0
        jz retjmp

        inc dword ptr [edi+(eax*4)]
        inc ecx
    jmp l1
    
    retjmp:
    pop ebp
    ret 8
getFrequency endp

END main


